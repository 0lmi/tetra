{
    "docs": [
        {
            "location": "/", 
            "text": "Tetra\n\n\ntetra\n is a test result aggregator designed to make test result analysis\nfaster, easier, and more automated.\n\n\nHow to use Tetra\n\n\n\n\nRun a test suite, like a suite of unit tests\n\n\nCreate a \nbuild\n in \ntetra\n's REST API for your test suite\n\n\nPost your test results to your created build. \ntetra\n accepts\n  XUnit-compatible XML to make this step easy\n\n\nExplore test results...\n\n\nin the dashboard,\n\n\nin the REST API,\n\n\nor use the REST API to build custom tools\n\n\n\n\n\n\n\n\nREST API Documentation\n\n\nThe \ntetra\n API consists of the following resources:\n\n\n\n\nProject\n - a project is the top-level container for all other resources\n\n\nBuild\n - a build groups results together\n\n\nResult\n - a result of a single test case\n\n\n\n\nThis is a JSON-based API:\n Unless indicated otherwise, all requests and\nresponses are in JSON format. All requests should have the \nContent-type\n and\n\nAccept\n headers set to \napplication/json\n.\n\n\nResponse Codes\n\n\nThese are the response codes used by Tetra.\n\n\n\n\n\n\n\n\nError Code\n\n\nMeaning\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\n200\n\n\nOK\n\n\nThe request handled successfully and information was returned in the body.\n\n\n\n\n\n\n201\n\n\nCreated\n\n\nThe request successfully and a resource was created. Check the response body for the resource id.\n\n\n\n\n\n\n204\n\n\nNo Content\n\n\nThe request was handled successfuly and the response body is empty.\n\n\n\n\n\n\n400\n\n\nBad Request\n\n\nThe request could not be parsed or the request data was invalid.\n\n\n\n\n\n\n404\n\n\nNot Found\n\n\nThe requested resource was not found.\n\n\n\n\n\n\n500\n\n\nServer Error\n\n\nThe API server encountered an error while handling the request.\n\n\n\n\n\n\n\n\nProjects\n\n\nA Project is the top-level container for all other resources.\n\n\n\n\n\n\n\n\nField\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nThe name of the project. This does not need to be unique.\n\n\n\n\n\n\nid\n\n\nint\n\n\nThe unique project id.\n\n\n\n\n\n\n\n\nCreate a Project\n\n\nPOST /projects HTTP/1.1\n...\n\n{\n    \nname\n: \nmy-project\n\n}\n\n\nHTTP/1.1 201 Created\n...\n\n{\n    \nid\n: 5,\n    \nname\n: \nmy-project\n\n}\n\n\n\n\nList Projects\n\n\nGET /projects HTTP/1.1\n...\n\n[\n    {\n        \nid\n: 1,\n        \nname\n: \nmy-project\n\n    },\n    {\n        \nid\n: 2,\n        \nname\n: \nmy-other-project\n\n    }\n]\n\n\n\n\nBuilds\n\n\nA Build is a container for Results.\n\n\n(A Build typically corresponds to a job on some automation server, like\n\nJenkins\n.)\n\n\n\n\n\n\n\n\nField\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nyes\n\n\nA descriptive name. This does not need to be unique.\n\n\n\n\n\n\nbuild_url\n\n\nstring\n\n\nno\n\n\nA link for your own usage, like to logs or to a Jenkins job url.\n\n\n\n\n\n\nregion\n\n\nstring\n\n\nno\n\n\nThe region being tested (e.g. US East, US West, IAD, DFW, ...)\n\n\n\n\n\n\nenvironment\n\n\nstring\n\n\nno\n\n\nThe environment being tested (e.g. preprod, staging, prod)\n\n\n\n\n\n\n\n\nCreate a Build\n\n\nPOST /projects/1/builds HTTP/1.1\n...\n\n{\n    \nbuild_url\n: \nhttp://jenkins.example.com/job/my-unit-tests/22\n,\n    \nenvironment\n: \npreprod\n,\n    \nname\n: \nmy-unit-tests\n,\n    \nregion\n: \nUS East\n\n}\n\n\nHTTP/1.1 201 Created\n...\n\n{\n    \nbuild_url\n: \nhttp://jenkins.example.com/job/my-unit-tests/22\n,\n    \nenvironment\n: \npreprod\n,\n    \nid\n: 1,\n    \nname\n: \nmy-unit-tests\n,\n    \nproject_id\n: 1,\n    \nregion\n: \nUS\n,\n    \ntags\n: null\n}\n\n\n\n\nList Builds\n\n\nGET /projects/1/builds HTTP/1.1\n...\n\n\nHTTP/1.1 200 OK\n...\n\n[\n    {\n        \nbuild_url\n: \nhttp://jenkins.example.com/job/my-unit-tests/22\n,\n        \nenvironment\n: \npreprod\n,\n        \nid\n: 1,\n        \nname\n: \nmy-unit-tests\n,\n        \nproject_id\n: 1,\n        \nregion\n: \nUS\n\n    },\n    {\n        \nbuild_url\n: null,\n        \nenvironment\n: \npreprod\n,\n        \nid\n: 2,\n        \nname\n: \nmy-unit-tests\n,\n        \nproject_id\n: 1,\n        \nregion\n: \nUS\n\n    }\n]\n\n\n\n\nFetch a Build\n\n\nGET /projects/1/builds/2 HTTP/1.1\n...\n\n\nHTTP/1.1 200 OK\n...\n\n{\n    \nbuild_url\n: null,\n    \nenvironment\n: \npreprod\n,\n    \nid\n: 2,\n    \nname\n: \nmy-unit-tests\n,\n    \nproject_id\n: 1,\n    \nregion\n: \nUS\n\n}\n\n\n\n\nResults\n\n\nA Result corresponds to an individual test case.\n\n\n\n\n\n\n\n\nField\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntest_name\n\n\nstring\n\n\nyes\n\n\nThe name of the result. This is typically the name of a test case.\n\n\n\n\n\n\nresult\n\n\nstring\n\n\nyes\n\n\nThe test case result. This should be one of: \npassed\n, \nfailed\n, \nskipped\n, \nerror\n.\n\n\n\n\n\n\nresult_message\n\n\nstring\n\n\nno\n\n\nAny additional text you would like to store, like test logs or tracebacks.\n\n\n\n\n\n\ntimestamp\n\n\nfloat\n\n\nno\n\n\nThe time the test was run. Defaults to the API server time.\n\n\n\n\n\n\n\n\nCreate a Result\n\n\nPOST /projects/1/builds/1/results HTTP/1.1\n...\n\n{\n    \nresult\n: \npassed\n,\n    \nresult_message\n: \nTraceback ... \nsome long traceback\n,\n    \ntest_name\n: \ndesignate_tempest_plugin.tests.scenario.v2.test_zones.ZonesTest.test_create_and_delete_zone\n\n}\n\nHTTP/1.1 201 Created\n...\n\n{\n    \nbuild_id\n: 1,\n    \nid\n: 352,\n    \nproject_id\n: 1,\n    \nresult\n: \npassed\n,\n    \nresult_message\n: \nTraceback ... \nsome long traceback\n,\n    \ntest_name\n: \ndesignate_tempest_plugin.tests.scenario.v2.test_zones.ZonesTest.test_create_and_delete_zone\n,\n    \ntimestamp\n: 1470079231.426697\n}\n\n\n\n\nImport Results from XUnit XML\n\n\nThis allows you to send XUnit-style XML directly to Tetra. Tetra will create\none result per \ntestcase\n.\n\n\nNotes\n\n\n\n\nThis requires the request header \nContent-type: application/xml\n\n\nTetra only supports XML containing a single \ntestsuite\n tag within the\n  \ntestsuites\n tag.\n\n\n\n\nPOST /projects/1/builds/2/results HTTP/1.1\nAccept: application/json\nContent-Type: application/xml\n\n\n?xml version=\n1.0\n ?\n\n\ntestsuites errors=\n100\n failures=\n100\n skipped=\n100\n tests=\n400\n time=\n25109.651362\n\n    \ntestsuite errors=\n100\n failures=\n100\n name=\nfake-junit-xml-suite\n skipped=\n100\n tests=\n400\n time=\n25109.651362\n\n        \ntestcase classname=\ngenerated.xml.test.case.passes\n name=\nTestPassed0\n time=\n91.617842\n /\n\n        \ntestcase classname=\ngenerated.xml.test.case.passes\n name=\nTestPassed1\n time=\n5.880439\n /\n\n        ...\n        \ntestcase classname=\ngenerated.xml.test.case.errors\n name=\nTestErrored98\n time=\n100.621474\n\n            \nerror message=\nerror! xXFrXlfHQjKUQevMahHnS gRctLqwOKwDzyRXSHl\n type=\nerror\n /\n\n        \n/testcase\n\n        \ntestcase classname=\ngenerated.xml.test.case.errors\n name=\nTestErrored99\n time=\n44.525510\n\n            \nerror message=\nerror! uxYVqAN XRJZUdgXzyMgxImOCoEBDndjE YJj gb\n type=\nerror\n /\n\n        \n/testcase\n\n    \n/testsuite\n\n\n/testsuites\n\n\nHTTP/1.1 201 Created\n...\n\n{\n    \nmetadata\n: {\n        \nsuccess_rate\n: 33.33,\n        \ntotal_errors\n: 100,\n        \ntotal_failures\n: 100,\n        \ntotal_passed\n: 100,\n        \ntotal_results\n: 400,\n        \ntotal_skipped\n: 100\n    }\n}\n\n\n\n\nList Results\n\n\nThere are two ways to list Results, which give responses in the same format:\n\n\n\n\n\n\n\n\nMethod\n\n\nPath\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nGET\n\n\n/projects/{project_id}/builds/{build_id}/results\n\n\nList Results for the Build \nbuild_id\n and Project \nproject_id\n\n\n\n\n\n\nGET\n\n\n/projects/{project_id}/results\n\n\nList all Results for the Project \nproject_id\n. This is useful for filtering across all builds.\n\n\n\n\n\n\n\n\nGET /projects/1/builds/2/results HTTP/1.1\n...\n\n\nHTTP/1.1 200 OK\n...\n\n{\n    \nmetadata\n: {\n        \nsuccess_rate\n: 33.33,\n        \ntotal_errors\n: 100,\n        \ntotal_failures\n: 100,\n        \ntotal_passed\n: 100,\n        \ntotal_results\n: 400,\n        \ntotal_skipped\n: 100\n    },\n    \nresults\n: [\n        {\n            \nbuild_id\n: 2,\n            \nid\n: 353,\n            \nproject_id\n: 1,\n            \nresult\n: \npassed\n,\n            \nresult_message\n: null,\n            \ntest_name\n: \ngenerated.xml.test.case.passes.TestPassed0\n,\n            \ntimestamp\n: 1470079711\n        },\n        ...\n    ]\n}\n\n\n\n\nArchitecture\n\n\ntetra\n consists of:\n\n\n\n\nAPI nodes\n\n\nWorker nodes\n\n\nA database\n\n\nA queue\n\n\nA dashboard", 
            "title": "Home"
        }, 
        {
            "location": "/#tetra", 
            "text": "tetra  is a test result aggregator designed to make test result analysis\nfaster, easier, and more automated.", 
            "title": "Tetra"
        }, 
        {
            "location": "/#how-to-use-tetra", 
            "text": "Run a test suite, like a suite of unit tests  Create a  build  in  tetra 's REST API for your test suite  Post your test results to your created build.  tetra  accepts\n  XUnit-compatible XML to make this step easy  Explore test results...  in the dashboard,  in the REST API,  or use the REST API to build custom tools", 
            "title": "How to use Tetra"
        }, 
        {
            "location": "/#rest-api-documentation", 
            "text": "The  tetra  API consists of the following resources:   Project  - a project is the top-level container for all other resources  Build  - a build groups results together  Result  - a result of a single test case   This is a JSON-based API:  Unless indicated otherwise, all requests and\nresponses are in JSON format. All requests should have the  Content-type  and Accept  headers set to  application/json .", 
            "title": "REST API Documentation"
        }, 
        {
            "location": "/#response-codes", 
            "text": "These are the response codes used by Tetra.     Error Code  Meaning  Definition      200  OK  The request handled successfully and information was returned in the body.    201  Created  The request successfully and a resource was created. Check the response body for the resource id.    204  No Content  The request was handled successfuly and the response body is empty.    400  Bad Request  The request could not be parsed or the request data was invalid.    404  Not Found  The requested resource was not found.    500  Server Error  The API server encountered an error while handling the request.", 
            "title": "Response Codes"
        }, 
        {
            "location": "/#projects", 
            "text": "A Project is the top-level container for all other resources.     Field  Type  Description      name  string  The name of the project. This does not need to be unique.    id  int  The unique project id.", 
            "title": "Projects"
        }, 
        {
            "location": "/#create-a-project", 
            "text": "POST /projects HTTP/1.1\n...\n\n{\n     name :  my-project \n}\n\n\nHTTP/1.1 201 Created\n...\n\n{\n     id : 5,\n     name :  my-project \n}", 
            "title": "Create a Project"
        }, 
        {
            "location": "/#list-projects", 
            "text": "GET /projects HTTP/1.1\n...\n\n[\n    {\n         id : 1,\n         name :  my-project \n    },\n    {\n         id : 2,\n         name :  my-other-project \n    }\n]", 
            "title": "List Projects"
        }, 
        {
            "location": "/#builds", 
            "text": "A Build is a container for Results.  (A Build typically corresponds to a job on some automation server, like Jenkins .)     Field  Type  Required  Description      name  string  yes  A descriptive name. This does not need to be unique.    build_url  string  no  A link for your own usage, like to logs or to a Jenkins job url.    region  string  no  The region being tested (e.g. US East, US West, IAD, DFW, ...)    environment  string  no  The environment being tested (e.g. preprod, staging, prod)", 
            "title": "Builds"
        }, 
        {
            "location": "/#create-a-build", 
            "text": "POST /projects/1/builds HTTP/1.1\n...\n\n{\n     build_url :  http://jenkins.example.com/job/my-unit-tests/22 ,\n     environment :  preprod ,\n     name :  my-unit-tests ,\n     region :  US East \n}\n\n\nHTTP/1.1 201 Created\n...\n\n{\n     build_url :  http://jenkins.example.com/job/my-unit-tests/22 ,\n     environment :  preprod ,\n     id : 1,\n     name :  my-unit-tests ,\n     project_id : 1,\n     region :  US ,\n     tags : null\n}", 
            "title": "Create a Build"
        }, 
        {
            "location": "/#list-builds", 
            "text": "GET /projects/1/builds HTTP/1.1\n...\n\n\nHTTP/1.1 200 OK\n...\n\n[\n    {\n         build_url :  http://jenkins.example.com/job/my-unit-tests/22 ,\n         environment :  preprod ,\n         id : 1,\n         name :  my-unit-tests ,\n         project_id : 1,\n         region :  US \n    },\n    {\n         build_url : null,\n         environment :  preprod ,\n         id : 2,\n         name :  my-unit-tests ,\n         project_id : 1,\n         region :  US \n    }\n]", 
            "title": "List Builds"
        }, 
        {
            "location": "/#fetch-a-build", 
            "text": "GET /projects/1/builds/2 HTTP/1.1\n...\n\n\nHTTP/1.1 200 OK\n...\n\n{\n     build_url : null,\n     environment :  preprod ,\n     id : 2,\n     name :  my-unit-tests ,\n     project_id : 1,\n     region :  US \n}", 
            "title": "Fetch a Build"
        }, 
        {
            "location": "/#results", 
            "text": "A Result corresponds to an individual test case.     Field  Type  Required  Description      test_name  string  yes  The name of the result. This is typically the name of a test case.    result  string  yes  The test case result. This should be one of:  passed ,  failed ,  skipped ,  error .    result_message  string  no  Any additional text you would like to store, like test logs or tracebacks.    timestamp  float  no  The time the test was run. Defaults to the API server time.", 
            "title": "Results"
        }, 
        {
            "location": "/#create-a-result", 
            "text": "POST /projects/1/builds/1/results HTTP/1.1\n...\n\n{\n     result :  passed ,\n     result_message :  Traceback ...  some long traceback ,\n     test_name :  designate_tempest_plugin.tests.scenario.v2.test_zones.ZonesTest.test_create_and_delete_zone \n}\n\nHTTP/1.1 201 Created\n...\n\n{\n     build_id : 1,\n     id : 352,\n     project_id : 1,\n     result :  passed ,\n     result_message :  Traceback ...  some long traceback ,\n     test_name :  designate_tempest_plugin.tests.scenario.v2.test_zones.ZonesTest.test_create_and_delete_zone ,\n     timestamp : 1470079231.426697\n}", 
            "title": "Create a Result"
        }, 
        {
            "location": "/#import-results-from-xunit-xml", 
            "text": "This allows you to send XUnit-style XML directly to Tetra. Tetra will create\none result per  testcase .  Notes   This requires the request header  Content-type: application/xml  Tetra only supports XML containing a single  testsuite  tag within the\n   testsuites  tag.   POST /projects/1/builds/2/results HTTP/1.1\nAccept: application/json\nContent-Type: application/xml ?xml version= 1.0  ?  testsuites errors= 100  failures= 100  skipped= 100  tests= 400  time= 25109.651362 \n     testsuite errors= 100  failures= 100  name= fake-junit-xml-suite  skipped= 100  tests= 400  time= 25109.651362 \n         testcase classname= generated.xml.test.case.passes  name= TestPassed0  time= 91.617842  / \n         testcase classname= generated.xml.test.case.passes  name= TestPassed1  time= 5.880439  / \n        ...\n         testcase classname= generated.xml.test.case.errors  name= TestErrored98  time= 100.621474 \n             error message= error! xXFrXlfHQjKUQevMahHnS gRctLqwOKwDzyRXSHl  type= error  / \n         /testcase \n         testcase classname= generated.xml.test.case.errors  name= TestErrored99  time= 44.525510 \n             error message= error! uxYVqAN XRJZUdgXzyMgxImOCoEBDndjE YJj gb  type= error  / \n         /testcase \n     /testsuite  /testsuites \n\nHTTP/1.1 201 Created\n...\n\n{\n     metadata : {\n         success_rate : 33.33,\n         total_errors : 100,\n         total_failures : 100,\n         total_passed : 100,\n         total_results : 400,\n         total_skipped : 100\n    }\n}", 
            "title": "Import Results from XUnit XML"
        }, 
        {
            "location": "/#list-results", 
            "text": "There are two ways to list Results, which give responses in the same format:     Method  Path  Description      GET  /projects/{project_id}/builds/{build_id}/results  List Results for the Build  build_id  and Project  project_id    GET  /projects/{project_id}/results  List all Results for the Project  project_id . This is useful for filtering across all builds.     GET /projects/1/builds/2/results HTTP/1.1\n...\n\n\nHTTP/1.1 200 OK\n...\n\n{\n     metadata : {\n         success_rate : 33.33,\n         total_errors : 100,\n         total_failures : 100,\n         total_passed : 100,\n         total_results : 400,\n         total_skipped : 100\n    },\n     results : [\n        {\n             build_id : 2,\n             id : 353,\n             project_id : 1,\n             result :  passed ,\n             result_message : null,\n             test_name :  generated.xml.test.case.passes.TestPassed0 ,\n             timestamp : 1470079711\n        },\n        ...\n    ]\n}", 
            "title": "List Results"
        }, 
        {
            "location": "/#architecture", 
            "text": "tetra  consists of:   API nodes  Worker nodes  A database  A queue  A dashboard", 
            "title": "Architecture"
        }
    ]
}